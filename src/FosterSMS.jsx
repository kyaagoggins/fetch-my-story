import React, { useEffect, useState } from "react";
import styles from './FosterSMS.module.css';
import { Button, Container, Grid2, TextField, Typography } from '@mui/material'
import Question from "./components/Question/Question";
import LoopIcon from '@mui/icons-material/Loop';
import axios from 'axios';
import { useLocation, useSearchParams } from 'react-router-dom';

/* Foster SMS Page 
   This page corresponds to the foster sms bio generation form 
   This page includes code for the handling of the completion of the form, as well as the description submissions
*/ 
export default function FosterSMS ({pet: propPet}) {

    //checks for a pet being passed
    //a pet will be passed if this page is visited using the link generated by the request workflow for that specific pet
    const location = useLocation();
    const passedPet = location.state?.pet;

    //checks for a pet being passed via url - also corresponds to the passed info in the request workflow
    const [searchParams] = useSearchParams();
    const petId = searchParams.get('petId');

    //default pet to allow the page to load with no pet passed parameters
    const defaultPet = {
        name: 'Momo',
        breeds: { primary: 'Tuxedo Long Hair' },
        species: 'cat',
        gender: 'male',
    }

    //sets pet to the pet being passed through url or props or default
    const pet = petId ? JSON.parse(localStorage.getItem(`pet-${petId}`)) : propPet || passedPet || defaultPet;

    //state variables needed for pet information 
    const [description, setDescription] = useState('');
    const [petName, setPetName] = useState('');
    const [petBreed, setPetBreed] = useState('');
    const [petSpecies, setPetSpecies] = useState('');
    const [petSex, setPetSex] = useState('');
    const [submitted, setSubmitted] = useState(false);
    const [selectedDate, setSelectedDate] = useState(() => new Date().toISOString().split("T")[0]);
    const [response, setResponse] = useState('');

    //runs on load 
    useEffect(() => {

        //sets pet details as the details passed from the pet prop
        setPetBreed(pet.breeds?.primary || 'Unknown Breed');
        setPetName(pet.name);
        setPetSpecies(pet.species);
        setPetSex(pet.gender);

        //updates description as the pet specific information
        setDescription(`${petName} is a ${petSex} ${petBreed} ${petSpecies}.`);

        //set petname in ui view 
    const petNameElements = document.getElementsByClassName("petName");
    for (let i = 0; i < petNameElements.length; i++) {
      petNameElements[i].textContent = petName;
    }
    }, [petName, petSex, petBreed, petSpecies]); //runs when these are changed

    //initializes state for pet questions usage within the page 
    const [petQuestions, setPetQuestions] = useState([]);

    //recieves pet questions from the local state as passed from the admin settings 
    useEffect(() => {
        const storedQuestions = JSON.parse(localStorage.getItem('petQuestions') || []);
        setPetQuestions(storedQuestions);
    }, []);

    //handle date change for the photos date selection
    const handleDateChange = (event) => {
        setSelectedDate(event.target.value);
      };
    
      //what happens on each question answer
      /* This function corresponds to what occurs when a question is answered 
        The id of the question, the chosen answer, and the desc value of the question is passed 
      */
    function handleQuestion(id, answer, desc) {
        //retrieves the specific question answered and hides the view 
        const element = document.getElementById(id);
        if (element) element.style.display = "none";

        //handles case for the photo question
        //toggles the photo date selection question
        if (desc == 'photos') {
            if (answer == 'Yes') {
                document.getElementById("photoDiv").style.display="flex";
            }
            return;
        }
        
        //functionality for all other questions
        //dependent on the answer, the description of the question gets added to the pet description
        if (answer == 'Yes') {
            setDescription(description + " " + petName + " " + desc + ".")
        }
        else if (answer == "No") {
            setDescription(description + " " + petName + " " + 'NOT ' + desc + ".")
        }
        else {
            setDescription(description);
        }
    }

    /* Submit Function
    Submits description - toggled when submit is selected at the bottom of the form
    */
    function submit() {
        setSubmitted(true);

        //retrieves the information if the user has additional information on the pet and passes it to the description
        let whatElse = document.getElementById("whatElse").value;
        document.getElementById("whatElseGrid").style.display="none";
        setDescription(description + " " + whatElse + ".");

        //updates the form to inform the user that a description is being generated 
        document.getElementById("info").innerHTML =`Thanks for giving ${petName} a better description! Please wait while we use AI to clean this up a bit...`;
        
        //calls function for api responses 
        sendMessage(); 
    }

    //prompt for chatgpt retrieved from the global state 
    const prompt = localStorage.getItem('prompt') || "generate a pet adoption description using the following info: ";

    /* Function that gets the chatgpt api call and sends the description
        This function goes to the defined api route in the server page and sends the necessary information 
        for the request
    */
    const sendMessage = async () => {
        try {
            //response is waiting the specific backend route 
          const res = await axios.post('http://localhost:3000/api/chat', {
            //giving the api the ai prompt and the description generated of the pet
            prompt: prompt + description,
          });

          //sets response to the response of the api call
          setResponse(res.data.message);

          //handle functionality for if the user filled information out regarding the pet scheduling question
          if (document.getElementById("photoDiv").style.display==="flex") {
            //adds request for photo scheduling to the body of the message generated that will get passed back to the admin
            setDescription(res.data.message + " Please schedule photos for this pet for " + selectedDate + ".");
          } else {
            setDescription(res.data.message);
          }
          
        } catch (err) {
            //catch errors with the response of the api route 
          console.error('Error sending message:', err);
          setResponse('Something went wrong.');
        }
      };

    /* Foster SMS Page HTML View 
    The above code is all functionality corresponding to the foster sms bio generation form  
    The below code is all of the views possible for the foster sms form 
    */
    return (
        <Container className={styles.phoneBorder}>
            <h1>Pet Description Generator</h1>
            <Grid2 className={styles.descTextGen} id='description'>{description}</Grid2>

            <p className={styles.disclaimer}>*This description uses generative AI. Gen AI is experimental.</p>
            <p id='info'>Answer a few questions to help us create an awesome pet description for <span className="petName"></span>.</p>

            <Grid2 container className={styles.questionaire}>
                {/* map function of all current pet questions as set in the settings of the app */}
                {petQuestions.map((question) => (
                    <Question
                    key={question.id}
                    questionId={question.id}
                    questionDesc={question.text.replace('PET', petName)}
                    questionResult={question.result}
                    askQuestion={handleQuestion}
                    />
                ))}

                {/* div for the photo question and date picker */}
                <Grid2 className={styles.photoQ} container display="none" id="photoDiv" direction="row">
                <Typography variant="" component="h4">When does {petName} need photos?</Typography>
                    <TextField
                    className={styles.date}
                    type="date"
                    value={selectedDate}
                    onChange={handleDateChange}
                    variant="outlined"
                    />
                </Grid2>

                {/* div for the what else question  */}
                <Grid2 size={8} id='whatElseGrid' container direction="row">
                <h4>What else should people know about {petName}?</h4>
                <TextField className={styles.else} id='whatElse'></TextField>
                </Grid2>

                <Grid2 size={6} className={styles.submit}>
                    <Button variant='contained' id='submitButton' onClick={submit} endIcon={submitted ? <LoopIcon /> : null}>Submit</Button>
                </Grid2>
            </Grid2>
        </Container>
    );
}